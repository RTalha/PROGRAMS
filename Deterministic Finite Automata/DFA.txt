//Muhammad Talha
//23-9-2017
//DFA
#include<iostream>
#include<string>
using namespace std;
int no_of_inputs;
int dfa[10][10];
char symbols[10];
string word;
int check_states(char ch, int p)
{
	int j;
	for (j = 0; j < no_of_inputs; j++)
	{
		if (ch == symbols[j])
		{
			return dfa[j][p];
		}
	}
	return -1;
}
int main()
{
	int no_of_states, no_of_finals = 0;
	int finals[10];
	int i, j, final, position;
	char c;

	
	cout << "\n\nEnter the number of states that your DFA consist of \n";
	cin >> no_of_states;

	cout << "\nenter the number of input symbols that DFA have \n";
	cin >> no_of_inputs;


	for (i = 0; i<no_of_inputs; i++)
	{
		cout << " input\t";
		cin >> symbols[i];
	}

	cout << "\nenter number of final states\t";
	cin >> no_of_finals;


	for (i = 0; i<no_of_finals; i++)
	{
		cout << "\n input\t";
		cin >> finals[i];
	}

	cout << "------------------------------------------------------------------------------";
	cout << "\ndefine transition rule as (initial state, input symbol ) = final state"<<endl;

	for (i = 0; i<no_of_inputs; i++)
	{
		for (j = 0; j<no_of_states; j++)
		{
			cout<<"\n(q"<<j<<" , "<<symbols[i]<<")= q";
			cin >> dfa[i][j];
		}
	}

	do
	{

		i = 0;
		cout << endl << " \nEnter Input String. ";
		cin >> word;
		j = word.length();
		i = position = 0;
		final = 0;

		while (i < j)
			if ((position = check_states(word[i++], position)) < 0)
				break;

		for (i = 0; i < no_of_finals; i++)

		if (finals[i] == position)
			final = 1;

		if (final == 1)
			cout << endl << " valid string";

		else
			cout << endl << " invalid string";

		cout << endl << "   Do you want to continue?  \n (y/n) ";

		cin >> c;
	} while (c == 'y');
	
}
